group Java;



concat(a,b) ::= <<
<a><b>
>>



type( field ) ::= <<
< if(     field.isBoolean )>boolean<
  elseif( field.isByte    )>byte   <
  elseif( field.isShort   )>short  <
  elseif( field.isUshort  )>short  <
  elseif( field.isInt     )>int    <
  elseif( field.isUint    )>int    <
  elseif( field.isLong    )>long   <
  elseif( field.isUlong   )>long   <
  elseif( field.isFloat   )>float  <
  elseif( field.isDouble  )>double <
  elseif( field.isString  )>String <
  elseif( field.isEnum    )><typesPackage>.<field.userType.name><
  elseif( field.isStruct  )><typesPackage>.<field.userType.name><
  endif>
>>



signature( fields ) ::= <<
< first( fields ):{field|<trim((type(field)))> <field.name>}><
  rest ( fields ):{field|, <trim((type(field)))> <field.name>}>
>>



args( fields ) ::= <<
< if( fields )> < first( fields ):{field|<field.name>}>< rest( fields ):{field|, <field.name>}> < endif>
>>



data( visibility, field ) ::= <<
<     if( field.isBoolean )><visibility> boolean <field.name>;
< elseif( field.isByte    )><visibility> byte <field.name>;
< elseif( field.isShort   )><visibility> short <field.name>;
< elseif( field.isUshort  )><visibility> ushort <field.name>;
< elseif( field.isInt     )><visibility> int <field.name>;
< elseif( field.isUint    )><visibility> uint <field.name>;
< elseif( field.isLong    )><visibility> long <field.name>;
< elseif( field.isUlong   )><visibility> ulong <field.name>;
< elseif( field.isFloat   )><visibility> float <field.name>;
< elseif( field.isDouble  )><visibility> double <field.name>;
< elseif( field.isString  )><visibility> String <field.name>;
< elseif( field.isEnum    )><visibility> <typesPackage>.<field.userType.name> _<field.name> = <typesPackage>.<field.userType.name>.values()[0];
< elseif( field.isStruct  )><visibility> final <typesPackage>.<field.userType.name> _<field.name> = new <typesPackage>.<field.userType.name>();
< endif>
>>



byteBufferPut( fields ) ::= <<
<fields:{field|
< if(     field.isBoolean )>ByteBufferHelper.putBoolean( _out, <field.name> );
< elseif( field.isByte    )>_out.put( <field.name> );
< elseif( field.isShort   )>_out.putShort( <field.name> );
< elseif( field.isUshort  )>_out.putShort( <field.name> );
< elseif( field.isInt     )>_out.putInt( <field.name> );
< elseif( field.isUint    )>_out.putInt( <field.name> );
< elseif( field.isLong    )>_out.putLong( <field.name> );
< elseif( field.isUlong   )>_out.putLong( <field.name> );
< elseif( field.isFloat   )>_out.putFloat( <field.name> );
< elseif( field.isDouble  )>_out.putDouble( <field.name> );
< elseif( field.isEnum    )>_out.put((byte)<field.name>.ordinal());
< elseif( field.isString  )>ByteBufferHelper.putString( _out, <field.name> );
< elseif( field.isStruct  )><field.name>.put( _out );
< endif>
}>
>>



enum( package, enum ) ::= <<
package <package>;

import java.nio.ByteBuffer;

import io.ByteBufferHelper;

public enum <enum.name> {

   <enum.literal:{literal|<literal.name; format="ID">,
}>}
>>



struct( package, struct, maxLength, maxStrLength ) ::= <<
package <package>;

import java.nio.ByteBuffer;

import io.ByteBufferHelper;

public class <struct.name> {

<struct.field:{field|
   public < if( field.isBoolean )>boolean <field.name>;
< elseif(       field.isByte    )>byte    <field.name>;
< elseif(       field.isShort   )>short   <field.name>;
< elseif(       field.isUshort  )>short   <field.name>;
< elseif(       field.isInt     )>int     <field.name>;
< elseif(       field.isUint    )>int     <field.name>;
< elseif(       field.isLong    )>long    <field.name>;
< elseif(       field.isUlong   )>long    <field.name>;
< elseif(       field.isFloat   )>float   <field.name>;
< elseif(       field.isDouble  )>double  <field.name>;
< elseif(       field.isString  )>String  <field.name>;
< elseif(       field.isEnum    )><field.userType.name> <field.name>;
< elseif(       field.isStruct  )>final <field.userType.name> <field.name> = new <field.userType.name>();
< endif>
}>
   public void put( ByteBuffer target ) {
      <struct.field:{field|
< if(     field.isBoolean )>ByteBufferHelper.putBoolean( target, <field.name> );
< elseif( field.isByte    )>target.put       ( <field.name> );
< elseif( field.isShort   )>target.putShort  ( <field.name> );
< elseif( field.isUshort  )>target.putShort  ( <field.name> );
< elseif( field.isInt     )>target.putInt    ( <field.name> );
< elseif( field.isUint    )>target.putInt    ( <field.name> );
< elseif( field.isLong    )>target.putLong   ( <field.name> );
< elseif( field.isUlong   )>target.putLong   ( <field.name> );
< elseif( field.isFloat   )>target.putFloat  ( <field.name> );
< elseif( field.isDouble  )>target.putDouble ( <field.name> );
< elseif( field.isEnum    )>target.put       ((byte)<field.name>.ordinal());
< elseif( field.isString  )>ByteBufferHelper.putString( target, <field.name> );
< elseif( field.isStruct  )><field.name>.put( target );
< endif>
}>   }

   public void get( ByteBuffer source ) {
      <struct.field:{field|
< if(     field.isBoolean )><field.name; format="width"> = ByteBufferHelper.getBoolean( source );
< elseif( field.isByte    )><field.name; format="width"> = source.get();
< elseif( field.isShort   )><field.name; format="width"> = source.getShort();
< elseif( field.isUshort  )><field.name; format="width"> = source.getShort();
< elseif( field.isInt     )><field.name; format="width"> = source.getInt();
< elseif( field.isUint    )><field.name; format="width"> = source.getInt();
< elseif( field.isLong    )><field.name; format="width"> = source.getLong();
< elseif( field.isUlong   )><field.name; format="width"> = source.getLong();
< elseif( field.isFloat   )><field.name; format="width"> = source.getFloat();
< elseif( field.isDouble  )><field.name; format="width"> = source.getDouble();
< elseif( field.isEnum    )><field.name; format="width"> = <field.userType.name>.values()[source.get()];
< elseif( field.isString  )><field.name; format="width"> = ByteBufferHelper.getString( source );
< elseif( field.isStruct  )><field.name; format="width">.put( source );
< endif>
}>   }
}
>>



requiredInterface( typesPackage, package, ifaceName, iface ) ::= <<
package <package>;
// requiredInterface

import java.io.IOException;

public interface I<ifaceName> {

<iface.eventOrRequestOrData:{facet|< if( facet.type )>< else>
   void <facet.name; format="argument">(<
if( facet.arguments )><
      signature( facet.arguments.field )><
else><
      signature( facet.field )><
endif>) throws IOException;< endif>
}>
}
>>



requiredImplementation( typesPackage, package, usedTypes, ifaceName, rawSize, iface, ifaceID ) ::= <<
package <package>;
//requiredImplementation
import java.io.IOException;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;

import io.ByteBufferHelper;

<usedTypes:{type|import <typesPackage>.<type>;
}>
public class <ifaceName> implements I<ifaceName> {

   private static final byte <iface.name; format="ID"> = <ifaceID>;

   <iface.eventOrRequestOrData:{facet|private static final byte <facet.name; format="ID"> = <i>;
}>
   private final DatagramChannel _channel;
   private final SocketAddress   _target;
   private final ByteBuffer      _out = ByteBuffer.allocate( <rawSize> );

   public <ifaceName>( DatagramChannel channel, SocketAddress target ) {
      _channel = channel;
      _target  = target;
   }
<iface.eventOrRequestOrData:{facet|< if( facet.type )>< else>

   @Override
   public void <facet.name; format="argument">(<
if( facet.arguments )><
    signature( facet.arguments.field )><
else><
    signature( facet.field )><
endif>) throws IOException {
      _out.clear();
      _out.put( <iface.name; format="ID"> );
      _out.put( <facet.name; format="ID"> );
      <
if( facet.arguments )><
      byteBufferPut( facet.arguments.field )><
else><
      byteBufferPut( facet.field )><
endif>
      _out.flip();
      final int size = _out.remaining();
      _channel.send( _out, _target );
      System.err.printf( "<ifaceName>.<facet.name>|%d byte(s) sent to %s\n", size, _target );
   \}< endif>
}>
}
>>



offeredInterface( typesPackage, package, name, usedTypes, facets ) ::= <<
package <package>;
// offeredInterface

import java.io.IOException;

public interface I<name> {

<facets:{facet|< if( facet.type )>< else>
   void <facet.name>(<
if( facet.arguments )><
    signature( facet.arguments.field )>, <typesPackage>.<name><facet.name; format="cap">Response reponse<
else><
    signature( facet.field )><
endif>) throws IOException;< endif>
}>
}
>>



byteBufferGet( field ) ::= <<
<     if( field.isBoolean )>final boolean <field.name> = ByteBufferHelper.getBoolean( _in );
< elseif( field.isByte    )>final byte <field.name> = _in.get();
< elseif( field.isShort   )>final short <field.name> = _in.getShort();
< elseif( field.isUshort  )>final ushort <field.name> = _in.getUShort();
< elseif( field.isInt     )>final int <field.name> = _in.getInt();
< elseif( field.isUint    )>final uint <field.name> = _in.getUInt();
< elseif( field.isLong    )>final long <field.name> = _in.getLong();
< elseif( field.isUlong   )>final ulong <field.name> = _in.getULong();
< elseif( field.isFloat   )>final float <field.name> = _in.getFloat();
< elseif( field.isDouble  )>final double <field.name> = _in.getDouble();
< elseif( field.isString  )>final String <field.name> = ByteBufferHelper.getString( _in );
< elseif( field.isEnum    )>final <typesPackage>.<field.userType.name> <field.name> = <typesPackage>.<field.userType.name>.values()[_in.get()];
< elseif( field.isStruct  )>final <typesPackage>.<field.userType.name> <field.name> = new <typesPackage>.<field.userType.name>();
<field.name>.get( _in );
< endif>
>>



dispatcherImplOneInterface() ::= <<
//dispatcherImplOneInterface -- begin
private static enum <ifaceName>Event {

   <events.(ifaceName):{event|<event.name; format="ID">( <i> ),
}>   ;

   private final int _value;

   <ifaceName>Event( int value ) {
      _value = value;
   }

   static <ifaceName>Event valueOf( int value ) {
      for( final <ifaceName>Event e : values()) {
         if( e._value == value ) {
            return e;
         }
      }
      return null;
   }
}

<events.(ifaceName):{facet|< if( facet.response )>
private static final byte EVENT_<ifaceName; format="ID">_RESPONSES_<facet.name; format="ID"> = <
                                              eventIDs.(ifaceName).(facet.name)>;
< endif>}>
private boolean dispatch( < if( offRequests.(ifaceName))>SocketAddress from, < endif><ifaceName>Event event ) throws IOException {
   System.err.println( getClass().getName() + "|event = " + event );
   switch( event ) {
<events.(ifaceName):{facet|< if( facet.type )>< else>
   case <facet.name; format="ID">:{
      < if( facet.arguments )><facet.arguments.field:{field|<
         byteBufferGet( field )>}>< 
      elseif( facet.field )><facet.field:{field|<
         byteBufferGet( field )>}><
      endif><
      if( facet.response )
>      final <typesPackage>.<ifaceName><facet.name; format="cap">Response response = new <
              typesPackage>.<ifaceName><facet.name; format="cap">Response();
      _listener.<facet.name>( <args( facet.arguments.field )>, response );
      _out.clear();
      _out.put( INTRFC_<ifaceName; format="ID">_RESPONSES );
      _out.put( EVENT_<ifaceName; format="ID">_RESPONSES_<facet.name; format="ID"> );
      response.put( _out );
      _out.flip();
      _channel.send( _out, from );
      System.err.printf( "SiteCentral.getInformations|response sent to %s\n", from );
      < else
>      _listener.<facet.name>(<args( facet.field )>);
      < endif>
      return true;\}
< endif>}>   default:
      System.err.printf( "%s.dispatch|Unexpected event: %s\n", getClass().getName(), event );
      return false;
   }
}
//dispatcherImplOneInterface -- end
>>



dispatcherImplResponse() ::= <<
// dispatcherImplResponse -- begin
private static enum <ifaceName>Response {

   <reqRequests.(ifaceName):{req|<req.name; format="ID">( <i> ),
}>   ;

   private final int _value;

   <ifaceName>Response( int value ) {
      _value = value;
   }

   static <ifaceName>Response valueOf( int value ) {
      for( final <ifaceName>Response e : values()) {
         if( e._value == value ) {
            return e;
         }
      }
      return null;
   }
}

private boolean dispatch( <ifaceName>Response event ) throws IOException {
   System.err.println( getClass().getName() + "|event = " + event );
   switch( event ) {
<reqRequests.(ifaceName):{req|
   case <req.name; format="ID">:{
      <req.response.field:{field|<byteBufferGet( field )>}
>      _listener.<req.name>(<args( req.response.field )>);
      return true;\}
}>   default:
      System.err.printf( "%s.dispatch|Unexpected event: %s\n", getClass().getName(), event );
      return false;
   }
}
// dispatcherImplResponse -- end
>>



dispatcherImplData() ::= <<
// dispatcherImplData -- begin
private static enum <iface.name>Data {

   <data.(iface):{dataType|<dataType.name; format="ID">( <eventIDs.(iface.name).(dataType.name)> ),
}>   ;

   private final int _value;

   <iface.name>Data( int value ) {
      _value = value;
   }

   static <iface.name>Data valueOf( int value ) {
      for( final <iface.name>Data e : values()) {
         if( e._value == value ) {
            return e;
         }
      }
      return null;
   }
}

private boolean dispatch( <iface.name>Data event ) throws IOException {
   System.err.println( getClass().getName() + "|event = " + event );
   switch( event ) {
<data.(iface):{dataType|
   case <dataType.name; format="ID">:{
      _listener._<dataType.name; format="argument">.get( _in );
      _listener.<dataType.name; format="argument">Published();
      return true;\}
}>   default:
      System.err.printf( "%s.dispatch|Unexpected event: %s\n", getClass().getName(), event );
      return false;
   }
}
// dispatcherImplData -- end
>>



dispatcherImplementation(
   typesPackage, package, component, offers, requires, events, eventIDs,
   ifacesIDs, usedTypes, rawSize, respRawSize, offRequests, reqRequests, data
) ::= <<
package <package>;
//dispatcherImplementation
import java.io.IOException;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;

import io.ByteBufferHelper;

public class <component.name>Dispatcher {

   < if( component.timeout )>private static final byte INTRFC_LOOPBACK = 0;
< endif>
<offers.keys:{ifaceName|
   private static final byte INTRFC_<ifaceName; format="ID,width"> = <offers.(ifaceName)>;
   < if( offRequests.(ifaceName))>private static final byte INTRFC_<ifaceName; format="ID">_RESPONSES = <
      ifacesIDs.( concat( ifaceName, "Responses" ))>;
< endif>
}>   < reqRequests:{ifaceName|private static final byte INTRFC_<ifaceName; format="ID">_RESPONSES = <
        ifacesIDs.( concat( ifaceName, "Responses" ))>;
}>
<offers.keys:{ifaceName|
   <dispatcherImplOneInterface()>
}>
<reqRequests:{ifaceName|
   <dispatcherImplResponse()>
}>
<data:{iface|

   private static final byte INTRFC_<iface.name; format="ID"> = <requires.(iface.name)>;
   <dispatcherImplData()>
}>< if( component.timeout )>
   protected static enum LoopbackEvent {
      <component.timeout:{to|<to.name; format="ID">( <i> ),
}>      ;

      private final int _value;

      LoopbackEvent( int value ) {
         _value = value;
      }

      static LoopbackEvent valueOf( int value ) {
         for( final LoopbackEvent e : values()) {
            if( e._value == value ) {
               return e;
            }
         }
         return null;
      }
   }

   private boolean dispatch( LoopbackEvent event ) throws IOException {
      switch( event ) {
<component.timeout:{to|
      case <to.name; format="ID">:{
         _listener.<to.name; format="argument">Elapsed();
         return true;\}
}>      default:
         System.err.printf( "%s.run|Unexpected event: %s\n", getClass().getName(), event );
         return false;
      }
   }

< endif>
   private final ByteBuffer      _in  = ByteBuffer.allocate( <rawSize> );
< if( offRequests )
>   private final ByteBuffer      _out = ByteBuffer.allocate( <respRawSize> );
< endif>   private final DatagramChannel _channel;
<data:{iface|<data.(iface):{field|
   <data("private", field)>}>}
>   private final <component.name>Component _listener;

   public <component.name>Dispatcher( DatagramChannel channel, <component.name>Component listener ) {
      _channel  = channel;
      _listener = listener;
   }

< if( component.timeout )>   void loopback( LoopbackEvent event ) throws IOException {
      final ByteBuffer out = ByteBuffer.allocate( 2 );
      out.put( INTRFC_LOOPBACK );
      out.put((byte)event._value );
      out.flip();
      _channel.send( out, _channel.getLocalAddress());
   }

< endif>   public boolean hasDispatched() throws IOException {
      _in.clear();
      final SocketAddress from = _channel.receive( _in );
      _in.flip();
      final byte intrfc = _in.get();
      final byte event  = _in.get();
      System.err.printf( "%s.run|intrfc = %d, event = %d, %d byte(s) remaining in message\n",
         getClass().getName(), intrfc, event, _in.remaining());
      switch( intrfc ) {
< if( component.timeout )>      case INTRFC_LOOPBACK: return dispatch( LoopbackEvent.valueOf( event ));
< endif><offers.keys:{ifaceName|
      case INTRFC_<ifaceName; format="ID">: return dispatch( <
         if( offRequests.(ifaceName))>from, < endif><ifaceName>Event.valueOf( event ));
}><reqRequests:{ifaceName|
      case INTRFC_<ifaceName; format="ID">_RESPONSES: return dispatch( <ifaceName>Response.valueOf( event ));
}><data:{iface|
      case INTRFC_<iface.name; format="ID">: return dispatch( <iface.name>Data.valueOf( event ));
}>      }
      return false;
   }
}
>>



componentImplementation(
    typesPackage, package, component, requires, dataWriter, instancesByName,
    instances, actions, data, reqData, processes, dataConsumer, responses
) ::= <<
package <package>;
//componentImplementation
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.StandardProtocolFamily;
import java.net.StandardSocketOptions;
import java.nio.channels.DatagramChannel;
< if( component.timeout )>
import java.time.Duration;

import util.Timeout;
< endif>


public abstract class <component.name>Component implements Runnable<
component.offers:          {o|, I<o.interface.name>}><
responses:{ifaceName|, I<ifaceName>}><
reqData:{iface|, I<iface.name>Data}> {

<component.timeout:{to|
   private static final Duration <to.name; format="ID">_DURATION = Duration.of<to.unit.toJava; format="cap">( <to.duration> );
}>
<data:{iface|
   protected final <iface.name>Data _<iface.name; format="argument">;
}><first(requires):{req|
   <requires.(req):{rt|protected final <rt.interface.name> _<rt.interface.name; format="argument">;
}>}><
if( component.automaton )>   protected final Automaton _automaton = new Automaton( this );
< endif>   protected final <component.name>Dispatcher _dispatcher;
<reqData:{iface|<reqData.(iface):{data|
   protected final <typesPackage>.<data.name; format="cap"> _<data.name; format="argument"> = new <
      typesPackage>.<data.name; format="cap">();
}>}><component.timeout:{to|
   protected final Timeout _<to.name> = new Timeout( <to.name; format="ID">_DURATION, () -> loopback( <
      component.name>Dispatcher.LoopbackEvent.<to.name; format="ID"> ));
}>
   private DatagramChannel _channel;
   private boolean         _running;

   public <component.name>Component( String name ) throws IOException {
      _running = false;
< if( requires )>
      InetSocketAddress <
first(requires):{req|<
first( requires.(req) ):{rt|<rt.interface.name; format="argument">}><
rest ( requires.(req) ):{rt|, <rt.interface.name; format="argument">}>}><
data:{iface|, <iface.name; format="argument">}>;
< endif>
< first(instances):{instance|
      if( name.equals( "<instance.name>" )) {
         _channel = DatagramChannel
            .open     ( StandardProtocolFamily.INET )
            .setOption( StandardSocketOptions.SO_REUSEADDR, true )
            .bind     ( new InetSocketAddress( "<
               processes.(instance).address>", <
               processes.(instance).port> ));
         <requires.(instance.name):{req|<req.interface.name; format="argument"> = new InetSocketAddress( "<
            processes.(instancesByName.(req.toInstance.name)).address>", <
            processes.(instancesByName.(req.toInstance.name)).port> );
}>         <data:{iface|<iface.name; format="argument"> = new InetSocketAddress( "<
            processes.(dataWriter.([instance.name, "/", iface.name])).address>", <
            processes.(dataWriter.([instance.name, "/", iface.name])).port> );
}>}
>      < rest(instances):{instance|\}
      else if( name.equals( "<instance.name>" )) {
         _channel = DatagramChannel
            .open     ( StandardProtocolFamily.INET )
            .setOption( StandardSocketOptions.SO_REUSEADDR, true )
            .bind     ( new InetSocketAddress( "<
               processes.(instance).address>", <
               processes.(instance).port> ));
         <requires.(instance.name):{req|<req.interface.name; format="argument"> = new InetSocketAddress( "<
            processes.(instancesByName.(req.toInstance.name)).address>", <
            processes.(instancesByName.(req.toInstance.name)).port> );
}>         <data:{iface|<iface.name; format="argument"> = new InetSocketAddress( "<
            processes.(dataWriter.([instance.name, "/", iface.name])).address>", <
            processes.(dataWriter.([instance.name, "/", iface.name])).port> );
}>}>      }
      else {
         throw new IllegalArgumentException( "'" + name + "' isn't a valid name defined in XML application file!" );
      }
<data:{iface|
      _<iface.name; format="argument"> = new <iface.name>Data( _channel, <iface.name; format="argument"> );
}>< first(requires):{req|<requires.(req):{rt|
      _<rt.interface.name; format="argument"> = new <
        rt.interface.name>( _channel, <rt.interface.name; format="argument"> );
}>}>      _dispatcher = new <component.name>Dispatcher( _channel, this );
   }<
if( component.afterDispatchNeeded )>

   protected abstract void afterDispatch() throws IOException;< endif>

   <component.timeout:{to|protected abstract void <to.name>Elapsed() throws IOException;
}>
   <actions:{action|protected abstract void <action>();
}>

<first(requires):{req|<requires.(req):{rt|
   public <rt.interface.name> get<rt.interface.name>() {
      return _<rt.interface.name; format="argument">;
   \}
}>}>
<data:{iface|
   public <iface.name>Data get<iface.name>() {
      return _<iface.name; format="argument">;
   \}
}>
   protected void terminate() {
      _running = false;
   }

< if( component.timeout )>
   protected void loopback( <component.name>Dispatcher.LoopbackEvent event ) {
      try {
         _dispatcher.loopback( event );
      }
      catch( final IOException t ) {
         t.printStackTrace();
      }
   }
< endif>
   @Override
   public final void run() {
      _running = true;
      while( _running ) {
         try {
            if( _dispatcher.hasDispatched()) {< if( component.afterDispatchNeeded )>
               afterDispatch();
< endif>
            }
         }
         catch( final IOException e ) {
            e.printStackTrace();
            terminate();
         }
      }
   }
}
>>



dataWriter( typesPackage, package, interface, ifaceID, data, dataID, rawSize  ) ::= <<
package <package>;

// dataWriter

import java.io.IOException;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;

public class <interface.name>Data {

   private static final byte <interface.name; format="ID"> = <ifaceID>;

<data:{dataType|
   private static final byte <dataType.name; format="ID"> = <dataID.(dataType.name)>;

   public final <typesPackage>.<dataType.name; format="cap"> _<dataType.name; format="argument"> = new <
      typesPackage>.<dataType.name; format="cap">();
}>
   private final DatagramChannel _channel;
   private final SocketAddress   _target;
   private final ByteBuffer      _out = ByteBuffer.allocate( <rawSize> );

   public UniteDeTraitementData( DatagramChannel channel, SocketAddress target ) {
      _channel = channel;
      _target  = target;
   }

<data:{dataType|
   public void publish<dataType.name; format="cap">() throws IOException {
      _out.clear();
      _out.put( <interface.name; format="ID"> );
      _out.put( <dataType.name; format="ID"> );
      _<dataType.name; format="argument">.put( _out );
      _out.flip();
      final int size = _out.remaining();
      _channel.send( _out, _target );
      System.err.printf( "%s.publish<dataType.name; format="cap">|%d byte(s) sent to %s\n", getClass().getName(), size, _target );
   \}
}>}
>>



dataReader( package, interface, data  ) ::= <<
package <package>;

// dataReader

import java.io.IOException;

public interface I<interface.name>Data {

<data:{dataType|
   void <dataType.name; format="argument">Published() throws IOException;
}>}
>>



automaton( typesPackage, package, component ) ::= <<
package <package>;

import <typesPackage>.<component.automaton.stateEnum.name>;
import <typesPackage>.<component.automaton.eventEnum.name>;

public class Automaton extends util.Automaton\<<component.automaton.stateEnum.name>, <component.automaton.eventEnum.name>\> {

   public Automaton( <component.name>Component component ) {
      super( <component.automaton.stateEnum.name>.<component.automaton.initial> );

      <component.automaton.transition:{transition|add( <
         component.automaton.stateEnum.name>.<transition.from>, <
         component.automaton.eventEnum.name>.<transition.event>, <
         component.automaton.stateEnum.name>.<transition.futur> );
}>
      <component.automaton.shortcut:{shortcut|add( <
         component.automaton.eventEnum.name>.<shortcut.event>, <
         component.automaton.stateEnum.name>.<shortcut.futur> );
}>
      <component.automaton.onEntryOrOnExit:{elt|add<elt.name.localPart; format="UpperCamelCase">( <
         component.automaton.stateEnum.name>.<elt.value.state>, component::<
         elt.value.action> );
}>   }
}
>>
