grammar org.hpms.dab.dsl.DAL hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate dal "http://org.hpms.dab.dsl/DAL"

DAL :
   ( description = STRING         )?
   ( 'types' types = types        )?
   ( interfaces  += interfaceType )+
   ( components  += component     )+
   ( deployments += deployment    )+
;
types :
   name = ID
   ( description = STRING )?
   ( structs += struct
   | enums   += enumType  )+
;
struct returns UserType :
   isClass ?= 'class' name = ID
   ( description = STRING )?
   ( fields += field )+
;
enumType returns UserType :
   isEnum ?= 'enum' name = ID
   ( description = STRING )?
   ( isAutomatonState ?= 'automaton-state'
   | ( literals += ID )+
   )
;
field :
   name = ID
   type = type
   ( description = STRING )?
;
QName:
   lib = [types|ID] '.' type = [UserType|ID]
;
type :
    type = 'boolean'
   |type = 'byte'
   |type = 'short'
   |type = 'ushort'
   |type = 'int'
   |type = 'uint'
   |type = 'long'
   |type = 'ulong'
   |type = 'float'
   |type = 'double'
   |type = 'string' '[' length = INT ']'
   |user = QName
;
interfaceType :
   'interface' name = ID
   ( description = STRING )?
   ( facets += facet )+
;
event:
   name = ID
   ( description = STRING )?
   ( fields += field )*
;
data:
   name = ID
   ( description = STRING )?
   type = type
;
requestOut:
   'response' response = QName
   ( description = STRING )?
;
requestIn:
   {requestIn} 'from' ( fields += field )*
   ( description = STRING )?
;
request:
   name = ID
   ( description = STRING )?
   out = requestOut
   in  = requestIn
;
facet :
     isEvent   ?= 'event'   event   = event
   | isData    ?= 'data'    data    = data
   | isRequest ?= 'request' request = request
;
component :
   'component' name = ID
   ( description = STRING )?
   ('offers'   ( offers   += offer   )+ )?
   ('requires' ( requires += require )+ )?
   ('timeout'  ( timeouts += timeout )* )?
   ( usesAutomaton ?= 'uses' 'an' 'automaton' )?
;
offer:
   intrfc = [interfaceType|ID]
;
require:
   intrfc = [interfaceType|ID]
;
timeout:
   name = ID duration = INT unit = unit
;
unit:
    'milliseconds'
   |'seconds'
   |'minutes'
   |'hours'
;
deployment:
   'deployment' name = ID
   ( description = STRING )?
   ( processes += process )+
;
process:
   'process' name = ID
   ( description = STRING )?
   ( instances += instance )+
;
instance:
   'instance' name = ID
   'of' component = [component|ID]
   ( description = STRING )?
   ('requires' ( requires += connection )+ )?
;
connection:
   intrfc = [interfaceType|ID] 'from'
   (
          instances += [instance|ID]
   |( '{' instances += [instance|ID] ( ',' instances += [instance|ID] )+ '}' )
   )
;
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal ID: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal STRING:
   '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
   "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
;
terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS         : (' '|'\t'|'\r'|'\n')+;
