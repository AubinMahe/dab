/*
 * generated by Xtext 2.19.0
 */
package org.hpms.dab.dsl.generator

import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Path
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.hpms.dab.dsl.dal.DAL
import org.hpms.dab.dsl.dal.type

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DALGenerator extends AbstractGenerator {

   private def generate( type type ) '''«
      IF type.user !== null»«
         IF type.user.type.isEnum || type.user.type.isAutomatonState
            »enum" userType="«type.user.lib.name».«type.user.type.name»«
         ELSE
            »struct" userType="«type.user.lib.name».«type.user.type.name»«
         ENDIF»«
      ELSEIF type.type == "string"
         »string" length="«type.length»«
      ELSE
         »«type.type»«
      ENDIF
   »'''

   private def description( String indent, String description ) {
      if( description === null || description.isBlank ) {
         return "";
      }
      return '''

«indent»description="«description»"''';
   }

   private def generate( DAL model ) '''
      <?xml version="1.0" encoding="UTF-8"?>
      <distributed-application xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="distributed-application.xsd"
         xmlns:xi="http://www.w3.org/2001/XInclude">
      «IF ! ( model.types.structs.empty && model.types.structs.empty )
»   <types module-name="«model.types.name»">
            «FOR clazz : model.types.structs»

               <struct name="«clazz.name»">
                  «FOR field : clazz.fields»
                     <field name="«field.name»" type="«generate( field.type )»"«
                        description( "   ", field.description )» />
                  «ENDFOR»
               </struct>
            «ENDFOR»
            «FOR clazz : model.types.enums»
               «IF ! clazz.isAutomatonState»

                  <enumeration name="«clazz.name»">
                  «FOR literal : clazz.literals»
                     <literal name="«literal»" />
                  «ENDFOR»
                  </enumeration>
               «ENDIF»
            «ENDFOR»

            «FOR language : model.types.generation.languages»
               <implementation language="«language.lang»" src-dir="«language.sources»" module-name="«language.name.substring( 1, language.name.length - 1 )»" />
            «ENDFOR»
         </types>

      «ENDIF»
      «FOR intrfc : model.interfaces
»   <interface name="«intrfc.name»">
            «FOR facet : intrfc.facets»
               «IF facet.isRequest»
                  <request name="«facet.request.name»" type="«facet.request.out.response.lib.name».«facet.request.out.response.type.name»"«
                     description( "   ", facet.request.description )»>
                     <arguments>
                        «FOR field : facet.request.in.fields»
                           <field name="«field.name»" type="«generate( field.type )»"«
                              description( "   ", field.description )» />
                        «ENDFOR»
                     </arguments>
                  </request>
               «ELSEIF facet.isData»
                  <data name="«facet.data.name»" type="«facet.data.type.user.lib.name».«facet.data.type.user.type.name»"«
                     description( "   ", facet.data.description )» />
               «ELSEIF facet.isIsEvent»
                  «IF facet.event.fields.isEmpty»
                     <event name="«facet.event.name»"«
                        description( "   ", facet.event.description )» />
                  «ELSE»
                     <event name="«facet.event.name»"«
                        description( "   ", facet.event.description )»>
                        «FOR field : facet.event.fields»
                           <field name="«field.name»" type="«generate( field.type )»"«
                              description( "   ", field.description )» />
                        «ENDFOR»
                     </event>
                  «ENDIF»
               «ENDIF»
            «ENDFOR»
         </interface>

      «ENDFOR»
      «FOR component : model.components
»   <component name="«component.name»" after-dispatch-needed="«component.afterDispatch»">
            «FOR offer : component.offers»
               <offers interface="«offer.intrfc.name»" />
            «ENDFOR»
            «FOR require : component.requires»
               <requires interface="«require.intrfc.name»" />
            «ENDFOR»
            «FOR to : component.timeouts»
               <timeout name="«to.name»" duration="«to.duration»" unit="«to.unit»" />
            «ENDFOR»
            «IF component.usesAutomaton»
               <xi:include href="./«component.name».automaton" />
            «ENDIF»
            «FOR language : component.generation.languages»
               <implementation language="«language.lang»" src-dir="«language.sources»" module-name="«language.name.substring( 1, language.name.length - 1 )»" />
            «ENDFOR»
         </component>

      «ENDFOR»
      «FOR deployment : model.deployments
»   <deployment name="«deployment.name»">
            «FOR process : deployment.processes»
               <process name="«process.name»" address="«IF process.hostname !== null»«process.hostname»«ELSE»«process.ip»«ENDIF»" port="«process.port»">
                  «FOR instance : process.instances»
                     «IF instance.requires.isEmpty»
                        <instance name="«instance.name»" component="«instance.component.name»" />
                     «ELSE»
                        <instance name="«instance.name»" component="«instance.component.name»">
                           «FOR require : instance.requires»
                              <requires interface="«require.intrfc.name»" to-instance="«require.instance.name»" />
                           «ENDFOR»
                        </instance>
                     «ENDIF»
                  «ENDFOR»
               </process>
            «ENDFOR»
         </deployment>

      «ENDFOR»
      </distributed-application>
   '''

	override void doGenerate( Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context ) {
      val model = resource.getContents.get(0) as DAL
      val text = generate( model )
      var str = resource.URI.toPlatformString( true )
      str = str.substring( 0, str.lastIndexOf( '.' )) + '-generated.xml'
      val iFile = ResourcesPlugin.workspace.root.getFile( new Path( str ))
      val file = iFile.projectRelativePath.toPortableString
      fsa.generateFile( file, text )
	}
}
