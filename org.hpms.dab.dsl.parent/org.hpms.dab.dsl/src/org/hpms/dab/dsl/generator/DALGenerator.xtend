/*
 * generated by Xtext 2.19.0
 */
package org.hpms.dab.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.hpms.dab.dsl.dal.DAL
import org.hpms.dab.dsl.dal.UserType
import org.hpms.dab.dsl.dal.component
import org.hpms.dab.dsl.dal.field
import org.hpms.dab.dsl.dal.interfaceType
import org.hpms.dab.dsl.dal.type
import org.hpms.dab.dsl.dal.types

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DALGenerator extends AbstractGenerator {

   private def generate( type type ) {
      if( type.user !== null ) '''«type.user.name»'''
      else if( type.string !== null ) '''string" length="«type.length»'''
      else type.type
   }

   private def generate( field field ) {
      return '''         <field name="«field.name»" type="«generate( field.type )»" description="«field.description»" />
      '''
   }

   private def generateClass( UserType clazz ) {
      var result = '''      <struct name="«clazz.name»">
      '''
      for( field : clazz.fields ) {
         result += generate( field ) 
      }
      return result + '''      </struct>
      '''
   }

   private def generateEnum( UserType enm ) {
      if( enm.isAutomatonState !== null ) {
         return ""
      }
      var result = '''      <enumeration name="«enm.name»">
      '''
      for( literal : enm.literals ) {
         result += '''         <literal name="«literal»" />
         ''' 
      }
      return result + '''      </enumeration>
      '''
   }

   private def generate( types types ) {
      if( types.classes.empty && types.classes.empty ) {
         return "";
      }
      var result = '''   <types>
      '''
      for( clazz : types.classes ) {
         result += generateClass( clazz )
      }
      for( clazz : types.enums ) {
         result += generateEnum( clazz )
      }
      return result + '''   </types>
      '''
   }

   private def generate( interfaceType intrfc ) {
      var result = '''   <interface name="«intrfc.name»">
      '''
      return result + '''   </interface>
      '''
   }
   
   private def generate( component component ) {
      var result = '''   <component name="«component.name»">
      '''
      return result + '''   </component>
      '''
   }
   
   private def generate( DAL model ) {
      var result = '''
      <?xml version="1.0" encoding="UTF-8"?>
      <distributed-application xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="distributed-application.xsd"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         name="«model.name»">
      '''
      result += generate( model.types )
      for( intrfc : model.interfaces ) {
         result += generate( intrfc )
      }
      for( component : model.components ) {
         result += generate( component )
      }
      return result + '''</distributed-application>
      '''
   }
   
	override void doGenerate( Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context ) {
      val model = resource.allContents.toIterable.filter( DAL ).get(0)
	   print( generate( model ))
      //fsa.generateFile( "../dab-generated.xml", text )
	}
}
